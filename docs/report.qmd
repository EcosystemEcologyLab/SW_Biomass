---
title: "AZ Carbon Stores"
format: 
  html:
    toc: true
editor: visual
execute: 
  echo: false
---

```{r}
#| label: setup
#| include: false

library(targets)
library(knitr)
library(here)
```

## Data

So far the data products include:

| Product                               | Downloaded (including CA) | Wrangled |
|---------------------------------------|---------------------------|----------|
| Xu AGBC                               | ✅                        | ✅       |
| Liu AGBC                              | ✅                        | ✅       |
| LT-GNN AGB                            | ✅                        | ✅       |
| Chopping AGB                          | ✅                        | ✅       |
| Menlove AGB                           | ✅                        | ✅       |
| ESA CCI/GlobBiomass AGB v004          | ✅                        | ✅       |
| GEDI L4B AGB v2.1                     | ✅                        | ✅       |
| Rangeland Analysis Platform (RAP) AGB | ✅                        | ✅       |

RAP is a model product only for rangelands (i.e. annual or perennial grasses and forbs) and is not included in comparisons right now.

## Figures

@sec-agb shows all of the data products transformed to the same extent and resolution.
@sec-median shows the median AGB across all products.
@sec-sd shows spatial distribution of uncertainty.
@sec-data-distribution shows the differences in AGB distribution among data products.

Observations:

-   The Liu product doesn't include *any* zeros

-   The Xu product has the largest area of low but not zero values

-   The ESA product has the greatest total range of values

-   The ESA product has some very high AGB pixels surrounded by very low (maybe zero?) AGB pixels—this may be an artifact of some kind?

### AGB {#sec-agb}

#### Arizona

```{r}
#| label: fig-map_agb_az
#| fig-cap: Maps of AGB for each data product in Arizona.
#| fig-align: center
include_graphics(tar_read(agb_map_az_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

#### California

```{r}
#| label: fig-map_agb_ca
#| fig-cap: Maps of AGB for each data product in California.
#| fig-align: center
include_graphics(tar_read(agb_map_ca_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

#### SRER

```{r}
#| label: fig-map_agb_srer
#| fig-cap: Maps of AGB for each data product in SRER
#| fig-align: center

include_graphics(tar_read(agb_map_srer_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

#### Pima County

```{r}
#| label: fig-map_agb_pima
#| fig-cap: Maps of AGB for each data product in Pima County
#| fig-align: center

include_graphics(tar_read(agb_map_pima_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

### Median {#sec-median}

#### Arizona

```{r}
#| label: fig-map_median_az
#| fig-cap: Median AGB across data products
#| fig-align: center

include_graphics(tar_read(median_map_az_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

#### California

```{r}
#| label: fig-map_median_ca
#| fig-cap: Median AGB across data products
#| fig-align: center

include_graphics(tar_read(median_map_ca_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

#### SRER

```{r}
#| label: fig-map_median_srer
#| fig-cap: Median AGB across data products
#| fig-align: center

include_graphics(tar_read(median_map_srer_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

#### Pima County

```{r}
#| label: fig-map_median_pima
#| fig-cap: Median AGB across data products
#| fig-align: center

include_graphics(tar_read(median_map_pima_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

### Standard Deviation {#sec-sd}

#### Arizona

```{r}
#| label: fig-map_sd_az
#| fig-cap: |
#|  Map of standard deviation of each raster pixel showing areas with the highest variation among data products in yellow and areas with the least variation in dark purple. Note: the color gradient is on a log scale.
#| fig-align: center

include_graphics(tar_read(sd_map_az_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

#### California

```{r}
#| label: fig-map_sd_ca
#| fig-cap: |
#|  Map of standard deviation of each raster pixel showing areas with the highest variation among data products in yellow and areas with the least variation in dark purple. Note: the color gradient is on a log scale.
#| fig-align: center

include_graphics(tar_read(sd_map_ca_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

#### SRER

```{r}
#| label: fig-map_sd_srer
#| fig-cap: |
#|  Map of standard deviation of each raster pixel showing areas with the highest variation among data products in yellow and areas with the least variation in dark purple. Note: the color gradient is on a log scale.
#| fig-align: center

include_graphics(tar_read(sd_map_srer_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

#### Pima County

```{r}
#| label: fig-map_sd_pima
#| fig-cap: |
#|  Map of standard deviation of each raster pixel showing areas with the highest variation among data products in yellow and areas with the least variation in dark purple. Note: the color gradient is on a log scale.
#| fig-align: center

include_graphics(tar_read(sd_map_pima_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

### Data distribution {#sec-data-distribution}

Density ridge plots are a good compact way to visualize this.

::: callout-note
It ended up being relatively easy to just do my own kernel density estimation, so now the ridgelines are correctly truncated at min and max without having to add a point to show the range of values.
:::

#### Arizona

```{r}
#| label: fig-ridge_az
#| fig-cap: Distribution of Arizona AGB values by data product.
#| fig-align: center

include_graphics(tar_read(ridge_az_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

#### California

```{r}
#| label: fig-ridge_ca
#| fig-cap: Distribution of Arizona AGB values by data product.
#| fig-align: center

include_graphics(tar_read(ridge_ca_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

#### SRER

```{r}
#| label: fig-ridge_srer
#| fig-cap: Distribution of Arizona AGB values by data product.
#| fig-align: center

include_graphics(tar_read(ridge_srer_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

#### Pima County

```{r}
#| label: fig-ridge_pima
#| fig-cap: Distribution of Arizona AGB values by data product.
#| fig-align: center

include_graphics(tar_read(ridge_pima_png, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

### Scatter plots

```{r}
#| label: fig-scatter
#| fig-cap: |
#|   Scatter plots showing relationship between each data product on the y-axis and the ESA product on the x-axis.  Plots show a random sample of 200,000 pixels from Arizona (out of a total 35,342,827 pixels).
#| layout-ncol: 3

include_graphics(tar_read(scatter_plots, store = here("_targets")) |>
                   fs::path_rel("docs"))
```

<!-- ### Point density plots -->

<!-- A point density plot is great for when a scatter plot contains many over-plotted points. -->

<!-- These plots use the [`ggpointdensity`](https://github.com/LKremer/ggpointdensity) package which extends `ggplot2`. -->

<!-- Color represents density of data under each point. -->

<!-- Because of the abundance of zeros, if the full dataset is plotted without any tansformation of the color scale, there is always a single bright spot in the lower left corner, but I think a log scale makes enough sense to use. -->

<!-- ![](fig/test_KernSmooth_log.png){width="524"} -->

<!-- This is an example of what it could look like, but there are technical barriers to getting it to work: <https://github.com/cct-datascience/SW_Biomass/issues/18>. -->

<!-- For now, maybe the scatter plots are good enough? -->

## Summary Statistics

```{r}
#| label: tbl-summary
#| tbl-cap: "Summary statistics calculated on median AGB across data products for each geographical subset."
#| echo: false
library(gt)
targets::tar_read(summary_stats, store = here("_targets")) |>
  gt::gt() |>
  fmt_number() |>
  opt_stylize() |>
  tab_style(cell_text(transform = "capitalize"), cells_column_labels())
```
